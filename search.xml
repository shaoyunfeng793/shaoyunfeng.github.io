<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP处理图片</title>
      <link href="/2022/09/29/php-dealImage/"/>
      <url>/2022/09/29/php-dealImage/</url>
      
        <content type="html"><![CDATA[<h3 id="使用GD库实现图片处理工具函数"><a href="#使用GD库实现图片处理工具函数" class="headerlink" title="使用GD库实现图片处理工具函数"></a>使用GD库实现图片处理工具函数</h3><p><strong>ps:</strong> <em>使用php完成对图片的裁切或者调整图片大小(缩放)</em></p><h4 id="php-Code"><a href="#php-Code" class="headerlink" title="php Code"></a>php Code</h4><pre><code class="php">&lt;?php    /* img_deal(String $file,String $save,Array $options)参数        $file 用户上传文件的路径        $save 保存的路径            $options参数:        - type 裁切(clip)或者是缩放(scale) 默认裁切            - scale参数 (至少写一个参数)        - scale_w 缩放后的宽度 (如果只设置其中一值则按原图比例缩放)        - scale_h 缩放后的高度            - clip参数 (全都得写)        - clip_w 裁切后的宽度        - clip_h 裁切后的高度        - clip_x 裁切起点x坐标(以图片左上顶点为原点,向下y正方向,向右x正方向)        - clip_y 裁切起点y坐标    */    function img_deal($file,$save,$options)&#123;            //上传的原图片        $img_src = imagecreatefromjpeg($file);        //原图片的宽高        $src_w = imagesx($img_src);        $src_h = imagesy($img_src);                switch ($options[&#39;type&#39;]) &#123;            case &#39;scale&#39;:                if(is_numeric($options[&#39;scale_w&#39;]) &amp;&amp; is_numeric($options[&#39;scale_h&#39;]))&#123;                    $dist_w = $options[&#39;scale_w&#39;];                    $dist_h = $options[&#39;scale_h&#39;];                &#125;elseif(is_numeric($options[&#39;scale_w&#39;]))&#123;                    $dist_w = $options[&#39;scale_w&#39;];                    $dist_h = $src_h*$dist_w/$src_w;                &#125;elseif(is_numeric($options[&#39;scale_h&#39;]))&#123;                    $dist_h = $options[&#39;scale_h&#39;];                    $dist_w = $src_w*$dist_h/$src_h;                &#125;else&#123;                    echo &#39;Image deal is Failed&lt;br&gt;&#39;;                    return false;                &#125;                //设置目标图片大小                $img_dist = imagecreatetruecolor($dist_w,$dist_h);                //图片进行处理                imagecopyresampled($img_dist, $img_src, 0, 0, 0, 0, $dist_w, $dist_h, $src_w, $src_h);                    break;                        default:                //设置目标图片大小                $img_dist = imagecreatetruecolor($options[&#39;clip_w&#39;],$options[&#39;clip_h&#39;]);                $keys = array_keys($options);                $str = implode($keys, &#39;,&#39;);                preg_match_all(&#39;/clip_/&#39;, $str, $matches);                if(count($matches[0]) !== 4)&#123;                    echo &#39;Image deal is Failed&lt;br&gt;&#39;;                    return false;                &#125;                    //图片进行处理                imagecopyresampled($img_dist, $img_src, 0, 0, $options[&#39;clip_x&#39;], $options[&#39;clip_y&#39;], $options[&#39;clip_w&#39;], $options[&#39;clip_h&#39;], $options[&#39;clip_w&#39;], $options[&#39;clip_h&#39;]);                                break;                        &#125;        //将图片保存        $status = imagejpeg($img_dist,$save);        if($status)&#123;            echo &#39;Image deal is Success&lt;br&gt;&#39;;        &#125;else&#123;            echo &#39;Image deal is Failed&lt;br&gt;&#39;;        &#125;        //释放内存空间        imagedestroy($img_dist);        imagedestroy($img_src);            //返回保存状态结果        return $status;        &#125; ?&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>axios拦截器配置</title>
      <link href="/2022/09/29/axios-axiosInterceptor/"/>
      <url>/2022/09/29/axios-axiosInterceptor/</url>
      
        <content type="html"><![CDATA[<h3 id="axios拦截器配置"><a href="#axios拦截器配置" class="headerlink" title="axios拦截器配置"></a>axios拦截器配置</h3><p><strong>ps:</strong> <em>http请求很多都喜欢配置拦截器，生成专属request方法，通过设置请求拦截器注入token，设置响应拦截器对响应作出响应的处理，比如报错信息，这样就不需要每次在catch里去提示错误信息了</em></p><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    import axios from &quot;axios&quot;;    import router from &#39;@/router/index.js&#39;;    import &#123; Message &#125; from &quot;element-ui&quot;;    import &#123; getToken, removeToken &#125; from &#39;@/utils/auth&#39;    const service = axios.create(&#123;    timeout: 20000 // 请求超时时间    &#125;);    // request拦截器，    service.interceptors.request.use(    config =&gt; &#123;        // 权限校验        var sysToken = getToken();        if (sysToken &amp;&amp; sysToken.length &gt; 0) &#123;        config.headers[&#39;Authorization&#39;] = sysToken        &#125;        return config;    &#125;,    error =&gt; &#123;        return Promise.reject(error);    &#125;    );    // response拦截器，    service.interceptors.response.use(    response =&gt; &#123;        if (response.config.responseType === &#39;blob&#39;) &#123;        if (response.status != 200) &#123;            Message.error(&#39;请求失败&#39; + response.status);            return Promise.reject()        &#125; else if (!response.headers[&quot;content-disposition&quot;]) &#123;            Message.error(&#39;暂无接口访问权限&#39;);            return Promise.reject()        &#125;        return response        &#125; else &#123;        if (response.data.code !== 0) &#123;            let errMsg = response.data.msg;            if (response.data.code == 401) &#123; // token失效            if (getToken()) &#123;                Message.error(errMsg);                removeToken()                router.replace(&#39;/Login&#39;)            &#125;            &#125; else &#123;            Message.error(errMsg);            &#125;            return Promise.reject(errMsg)        &#125;        return response.data;        &#125;    &#125;,    error =&gt; &#123;        Message.error(&#39;请求服务器失败&#39;);        return Promise.reject(error);    &#125;    );    export default service</code></pre>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态生成vue路由</title>
      <link href="/2022/09/29/vue-makeRoutes/"/>
      <url>/2022/09/29/vue-makeRoutes/</url>
      
        <content type="html"><![CDATA[<h3 id="动态生成vue路由"><a href="#动态生成vue路由" class="headerlink" title="动态生成vue路由"></a>动态生成vue路由</h3><p><strong>ps:</strong> <em>实现动态路由，通过后端返回的菜单，然后<code>addRoutes</code>进行动态生成vue的路由，详情：<a href="https://www.cnblogs.com/shaoyunfeng93/p/16266729.html">https://www.cnblogs.com/shaoyunfeng93/p/16266729.html</a></em></p><h4 id="vue-Code"><a href="#vue-Code" class="headerlink" title="vue Code"></a>vue Code</h4><p>因为在路由中存在毫无实意的父级目录，所以需要有个<code>router-view</code>来承接子页面的展示</p><pre><code class="vue">// RouterView组件&lt;template&gt;  &lt;router-view&gt;&lt;/router-view&gt;&lt;/template&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><p>动态生成路由需要和后端开发人员约定好配置的参数,而且<em>后端配置的url需要和前端文件的目录结构一致</em>…<br>用来处理后端返回的菜单拼接成<code>vue-router</code>的格式, 该vue项目是根据<code>vue-admin-template</code>模板<strong>二次开发</strong>的…</p><pre><code class="js">  // 加载视图组件  function loadView(componentUrl) &#123;      return resolve =&gt; require.ensure([], () =&gt; resolve(require(&#39;@/views&#39; + componentUrl)))  &#125;  // 递归构造路由  function buildRoutes(routes) &#123;      return routes.map(route =&gt; &#123;          let _route = &#123;&#125;;          let meta = &#123;              title: route.name,              icon: route.icon,          &#125;;          if (route.type == 1) &#123; // 目录              _route.component = route.parentId == 0 ? Layout : RouterView;              if (route.children &amp;&amp; route.children[0]) &#123;                  _route.redirect = route.children[0].path;              &#125;          &#125; else if (route.type == 2) &#123; // 菜单              _route.component = loadView(route.url)              meta.actionButtonList = route.children || [];          &#125;          return &#123;              path: route.url,              name: route.code,              ..._route,              meta,              children: route.type == 1 ? buildRoutes(route.children || []) : [], // 只有目录才去在构造children路由          &#125;      &#125;)  &#125;  // 递归过滤掉有重定向却没有children的父级路由  function filterAsyncRoutes(routes) &#123;      routes = routes.filter(d =&gt; &#123;          return d.type != 1 || (d.children &amp;&amp; d.children.length &gt; 0)      &#125;)      routes.forEach(route =&gt; &#123;          if (route.children &amp;&amp; route.children.length &gt; 0) &#123;              route.children = filterAsyncRoutes(route.children)          &#125;      &#125;)      return routes  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里oss上传工具函数</title>
      <link href="/2022/09/29/js-aliOssUpload/"/>
      <url>/2022/09/29/js-aliOssUpload/</url>
      
        <content type="html"><![CDATA[<h3 id="阿里oss上传工具函数"><a href="#阿里oss上传工具函数" class="headerlink" title="阿里oss上传工具函数"></a>阿里oss上传工具函数</h3><p><strong>ps:</strong> <em>现在很多图片上传都是托管到阿里云oss上的,前端方法如下</em></p><h4 id="安装-ali-oss"><a href="#安装-ali-oss" class="headerlink" title="安装 ali-oss"></a>安装 ali-oss</h4><p><code>compressorjs</code>用来压缩图片，<code>ali-oss</code>用来上传oss</p><pre><code class="bash">    npm install ali-oss    npm install compressorjs</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    import OSS from &#39;ali-oss&#39;;    import Compressor from &#39;compressorjs&#39;;    import &#123; randomString &#125; from &#39;@/utils/index.js&#39;;    const &#123; accessKeyId, accessKeySecret, region, endpoint &#125; = &#123;    region: &#39;your region&#39;,    accessKeyId: &#39;your accessKeyId&#39;,    accessKeySecret: &#39;your accessKeySecret&#39;,    endpoint: &#39;oss-cn-hangzhou.aliyuncs.com&#39;    &#125;;    const client = new OSS(&#123;    // yourRegion填写Bucket所在地域。以华东1（杭州）为例，Region填写为oss-cn-hangzhou。    region: region,    // 从STS服务获取的临时访问密钥（AccessKey ID和AccessKey Secret）。    accessKeyId: accessKeyId,    accessKeySecret: accessKeySecret,    endpoint: endpoint,    // 填写Bucket名称。    bucket: &#39;mdhw&#39;    &#125;);    /**     * 图片压缩     */    function compressImage(fileList, backType, limitSize, quality) &#123;    const promiseAry = [];    const maxSize = limitSize * 1024 * 1024;    fileList.forEach(image =&gt; &#123;        promiseAry.push(new Promise((resolve, reject) =&gt; &#123;        if (image.size &lt;= maxSize) &#123; // 没操过限制，不用压缩            resolve(image)        &#125;        else &#123;            new Compressor(image, &#123;            // maxWidth: 750,            // maxHeight: 750,            quality: quality || 0.8,            success(result) &#123;                let file = new File([result], image.name, &#123; type: image.type &#125;)                if (!backType || backType == &#39;blob&#39;) &#123;                resolve(result)                &#125; else if (backType == &#39;file&#39;) &#123;                resolve(file)                &#125; else &#123;                resolve(file)                &#125;            &#125;,            error(err) &#123;                console.log(&#39;图片压缩失败----&gt;&gt;&gt;&gt;&gt;&#39;, err)                resolve(image)            &#125;            &#125;)        &#125;        &#125;))    &#125;)    return Promise.all(promiseAry)    &#125;    const defaultLimit = 1;    /**     *     * @param fileList 上传图片的资源路径     * @param dir oss要保存的文件夹     * @param limitSize oss图片限制 默认1m 0为不限制     * @returns &#123;OSS文件路径&#125;     */    async function uploadOSS(fileList, dir = &#39;file&#39;, &#123;    limitSize = defaultLimit, compress = false    &#125;) &#123;    return new Promise((resolve, reject) =&gt; &#123;        const promiseAry = [];        let randomVal, randomStr, imgtype, fileName, tmpAry, maxSize = limitSize * 1024 * 1024;        let _Promise = compress ? compressImage(fileList, &#39;file&#39;, limitSize) : Promise.resolve(fileList)        if (compress) &#123;        console.log(&#39;压缩前的图片列表&#39;, fileList)        &#125;        _Promise.then(fileList =&gt; &#123;        if (compress) &#123;            console.log(&#39;压缩后的图片列表&#39;, fileList)        &#125;        const canUploadList = limitSize == 0 ? fileList : fileList.filter(file =&gt; file.size &lt;= maxSize);        canUploadList.forEach(file =&gt; &#123;            tmpAry = file.name.split(&#39;.&#39;);            imgtype = tmpAry[tmpAry.length - 1]            randomVal = +new Date();            randomStr = randomString()            fileName = `$&#123;randomVal&#125;_$&#123;randomStr&#125;.$&#123;imgtype&#125;`            promiseAry.push(client.put(`$&#123;dir&#125;/$&#123;fileName&#125;`, file, &#123;            headers: &#123;                &#39;aa&#39;: &#39;aa&#39;            &#125;            &#125;))        &#125;)        Promise.all(promiseAry).then(result =&gt; &#123;            let code = canUploadList.length == fileList.length ? 1 : 0            resolve(&#123;            result,            code,            msg: code == 1 ? &#39;上传成功&#39; : `$&#123;fileList.length == 1 ? &#39;&#39; : &#39;部分&#39;&#125;图片大小超过$&#123;limitSize&#125;M`            &#125;);        &#125;).catch(e =&gt; &#123;            reject(e)        &#125;)        &#125;)    &#125;);    &#125;    export &#123; uploadOSS, defaultLimit &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>监听用户返回页面</title>
      <link href="/2022/09/29/js-listenUserBack/"/>
      <url>/2022/09/29/js-listenUserBack/</url>
      
        <content type="html"><![CDATA[<h3 id="监听用户返回页面"><a href="#监听用户返回页面" class="headerlink" title="监听用户返回页面"></a>监听用户返回页面</h3><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>在h5支付页面完成后，需要判断用户返回再去请求后端接口是否支付成功，在进行后续步骤…</p><h4 id="code-Explain"><a href="#code-Explain" class="headerlink" title="code Explain"></a>code Explain</h4><p>这边就只展示解决兼容移动端浏览器去请求后端是否支付订单的步骤；</p><p>解释一下为啥使用两种监听事件，还有为啥要用sessionStorage去存储sign_paying这个是否支付中状态</p><p>在一些移动端浏览器中，各个浏览器五花八门，一些浏览器的行为也千姿百态，</p><p>在ios的safari浏览器中，前进后退是走缓存的，安卓浏览器中一些走缓存一些不走缓存，如果不用localStorage存储状态每次前进后退会导致sign_paying一直都被重置为false，导致不去请求支付结果接口，从而导致不执行支付成功或失败的逻辑</p><p>pageshow事件是不管页面走不走缓存都会触发的window事件，页面刷新也会执行，也就是说只要来到这个页面就执行，但是后台挂起在打开不执行</p><p>visibilitychange事件将后台挂起在打开会执行，</p><p>正如上面所说的各个浏览器心怀鬼胎，我们都猜不到他们的行为是如何的，在拉起支付宝（针对原生支付）的行为上也不太清楚，就我测试的ios是直接跳到新的页面在提示拉起（产生前进&#x2F;后退），在安卓上有的也是跳到新的页面在提示拉起（产生前进&#x2F;后退），有的直接在当前页就直接提示拉起（不产生前进&#x2F;后退）；</p><p>因此同时监听上2个事件，并在监听事件里加上httpCount:0时才能执行httpQueryOrderPay， signStack是用来限制只走一遍查询，因为2个监听可能同时都会执行httpQueryOrderPay</p><p>还有一点就是可能有人会觉得奇怪为什么把httpQueryOrderPay用setTimeout变为异步， 因为在部分手机（在我测试来看 三星默认浏览器存在这个问题）会导致ajax请求xhr.status返回0，导致直接走到error；具体原因我也不太清楚T_T，但是只要异步一下就OK了。</p><p>这些也只是为了知道啥时候才去请求支付结果接口，不然也大可以直接在页面一展示就去请求轮询，但是对服务器压力太大~</p><p><strong>ps:</strong> <em>以下其实是vue的代码…勉强看一下…</em></p><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    // visibilityChange事件兼容性写法    var hidden, visibilityChange;    if (typeof document.hidden !== &quot;undefined&quot;) &#123; // Opera 12.10 and Firefox 18 and later support        hidden = &quot;hidden&quot;;        visibilityChange = &quot;visibilitychange&quot;;    &#125; else if (typeof document.msHidden !== &quot;undefined&quot;) &#123;        hidden = &quot;msHidden&quot;;        visibilityChange = &quot;msvisibilitychange&quot;;    &#125; else if (typeof document.webkitHidden !== &quot;undefined&quot;) &#123;        hidden = &quot;webkitHidden&quot;;        visibilityChange = &quot;webkitvisibilitychange&quot;;    &#125;    // 监听用户返回页面的事件    if (sessionStorage.getItem(&#39;qyyz_paying&#39;) == &#39;true&#39;) &#123;        this.signStack.push(&#39;reload&#39;)        this.httpQueryOrderPay(&#39;reload&#39;);    &#125;    window.addEventListener(&#39;pageshow&#39;, this.pageShow, false);    document.addEventListener(visibilityChange, this.visibilityChange, false);    // 参数说明： httpCount: 请求是否支付的接口次数, httpQueryOrderPay根据自己的接口逻辑来替换，    methods: &#123;        pageShow() &#123;            if (sessionStorage.getItem(&#39;sign_paying&#39;) == &#39;true&#39;) &#123; // 是否支付中                // 轮询是否支付了            this.signStack.push(&#39;pageShow&#39;);                setTimeout(() =&gt; &#123;                    this.httpQueryOrderPay(&#39;pageShow&#39;);                &#125;, 0)            &#125;        &#125;,        visibilityChange() &#123;            if (!document[hidden]) &#123;                if (sessionStorage.getItem(&#39;sign_paying&#39;) == &#39;true&#39;) &#123; // 是否支付中                    // 轮询是否支付了                this.signStack.push(&#39;visibilityChange&#39;);                    setTimeout(() =&gt; &#123;                        this.httpQueryOrderPay(&#39;visibilityChange&#39;);                    &#125;, 0)                &#125;            &#125;        &#125;,        httpQueryOrderPay(type) &#123;            if (type !== this.signStack[0]) &#123; // 谁最先执行就走哪个                return;            &#125;            this.httpCount++;            ajax(&#123;                url: &#39;查询订单支付结果的接口&#39;,                type: &#39;get&#39;,                data: &#123;                    orderId: 订单id                &#125;,                success: res =&gt; &#123;                    if (res.result) &#123;                        this.httpCount = 0;                        sessionStorage.setItem(&#39;sign_paying&#39;, false);                    &#125; else &#123;                        if (this.httpCount &lt; 3) &#123; // 轮询不超过3次                            setTimeout(() =&gt; &#123;                                this.httpQueryOrderPay(type);                            &#125;, 500)                        &#125; else if (this.httpCount == 3) &#123; // 轮询到第3次没有找到,则提示用户                            this.httpCount = 0;                            sessionStorage.setItem(&#39;sign_paying&#39;, false);                            // 挽留提示                        &#125;                    &#125;                &#125;,                //异常处理                error: e =&gt; &#123;                    this.httpCount = 0;                    sessionStorage.setItem(&#39;sign_paying&#39;, false);                &#125;            &#125;)        &#125;,    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js手写函数</title>
      <link href="/2022/09/29/js-handWriteFunc/"/>
      <url>/2022/09/29/js-handWriteFunc/</url>
      
        <content type="html"><![CDATA[<h3 id="js手写函数"><a href="#js手写函数" class="headerlink" title="js手写函数"></a>js手写函数</h3><p><strong>ps:</strong> <em>好像面试的时候都喜欢让手写 …</em></p><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    // url的queryString转成对象    function queryStr2Obj(url) &#123;        const query = &#123;&#125;;        const search = url.split(&#39;?&#39;)[1];        if (!search) &#123;            return &#123;&#125;        &#125;        search.split(&#39;&amp;&#39;).forEach(item =&gt; &#123;            let [key, value] = item.replace(&#39;=&#39;, &#39;:&#39;).split(&#39;:&#39;);            query[key] = decodeURIComponent(value);        &#125;);        return query;    &#125;    // list数组转tree数组    const currentArray = [        &#123; id: &quot;01&quot;, name: &quot;张大大&quot;, pid: &quot;&quot;, job: &quot;项目经理&quot; &#125;,        &#123; id: &quot;02&quot;, name: &quot;小亮&quot;, pid: &quot;01&quot;, job: &quot;产品leader&quot; &#125;,        &#123; id: &quot;03&quot;, name: &quot;小美&quot;, pid: &quot;01&quot;, job: &quot;UIleader&quot; &#125;,        &#123; id: &quot;04&quot;, name: &quot;老马&quot;, pid: &quot;01&quot;, job: &quot;技术leader&quot; &#125;,        &#123; id: &quot;05&quot;, name: &quot;老王&quot;, pid: &quot;01&quot;, job: &quot;测试leader&quot; &#125;,        &#123; id: &quot;06&quot;, name: &quot;老李&quot;, pid: &quot;01&quot;, job: &quot;运维leader&quot; &#125;,        &#123; id: &quot;07&quot;, name: &quot;小丽&quot;, pid: &quot;02&quot;, job: &quot;产品经理&quot; &#125;,        &#123; id: &quot;08&quot;, name: &quot;大光&quot;, pid: &quot;02&quot;, job: &quot;产品经理&quot; &#125;,        &#123; id: &quot;09&quot;, name: &quot;小高&quot;, pid: &quot;03&quot;, job: &quot;UI设计师&quot; &#125;,        &#123; id: &quot;10&quot;, name: &quot;小刘&quot;, pid: &quot;04&quot;, job: &quot;前端工程师&quot; &#125;,        &#123; id: &quot;11&quot;, name: &quot;小华&quot;, pid: &quot;04&quot;, job: &quot;后端工程师&quot; &#125;,        &#123; id: &quot;12&quot;, name: &quot;小李&quot;, pid: &quot;04&quot;, job: &quot;后端工程师&quot; &#125;,        &#123; id: &quot;13&quot;, name: &quot;小赵&quot;, pid: &quot;05&quot;, job: &quot;测试工程师&quot; &#125;,        &#123; id: &quot;14&quot;, name: &quot;小强&quot;, pid: &quot;05&quot;, job: &quot;测试工程师&quot; &#125;,        &#123; id: &quot;15&quot;, name: &quot;小涛&quot;, pid: &quot;06&quot;, job: &quot;运维工程师&quot; &#125;    ];    function list2tree(list, pid) &#123;        let children = list.filter(item =&gt; item.pid == pid);        return children.map(item =&gt; &#123;            item.children = list2tree(list, item.id);            return item;        &#125;)    &#125;    // tree数组转list数组    function tree2list(tree) &#123;        const list = [], queue = [...tree];        while (queue.length) &#123;            let &#123; children, ...node &#125; = queue.shift();            if (children) &#123;                queue.push(...children)            &#125;            list.push(node)        &#125;        return list;    &#125;    // 多维数组，每每元素组合，不重复    /*    * 如： arr =  [[1,2],[3,4]]  =&gt; combination(arr) =&gt; [[1,3],[1,4],[2,3],[2,4]]    */    function combination(arr) &#123;        const ary = [];        const store = [];        const fn = function (i = 0) &#123;            for (let j = 0; j &lt; arr[i].length; j++) &#123;                if (i &lt; arr.length - 1) &#123;                    store[i] = arr[i][j];                    fn(i + 1)                &#125; else &#123;                    ary.push([...store, arr[i][j]])                &#125;            &#125;        &#125;        fn();        return ary;    &#125;    // 函数柯里化（思路：递归收集参数，参数刚好时调用原函数）    function curry(fn, args = []) &#123;        return (...arg) =&gt; &#123;            let _arg = args.concat(arg)            if (_arg.length != fn.length) &#123;                return curry(fn, _arg)            &#125; else &#123;                return fn(..._arg)            &#125;        &#125;    &#125;    // 节流    function throttle(fn, delay) &#123;        // 重置定时器        let timer = null;        // 返回闭包函数        return function () &#123;            // 记录事件参数            let args = arguments;            // 如果定时器为空            if (!timer) &#123;                // 开启定时器                timer = setTimeout(() =&gt; &#123;                    // 执行函数                    fn.apply(this, args);                    // 函数执行完毕后重置定时器                    timer = null;                &#125;, delay);            &#125;        &#125;    &#125;    // 防抖    function debounce(fn, delay = 500) &#123;        // timer是一个定时器        let timer = null;        // 返回一个闭包函数，用闭包保存timer确保其不会销毁，重复点击会清理上一次的定时器        return function () &#123;            // 保存事件参数，防止fn函数需要事件参数里的数据            let arg = arguments;            // 调用一次就清除上一次的定时器            clearTimeout(timer);            // 开启这一次的定时器            timer = setTimeout(() =&gt; &#123;                // 若不改变this指向，则会指向fn定义环境                fn.apply(this, arg);            &#125;, delay)        &#125;    &#125;    // call    function mycall(that, ...args) &#123;        that = that == null ? window : new Object(that)        that.fn = this;        that.fn(...args);        delete that.fn;    &#125;    Function.prototype.mycall = mycall    // apply    function myapply(that, args) &#123;        that = that == null ? window : new Object(that)        that.fn = this;        that.fn(...args);        delete that.fn;    &#125;    Function.prototype.myapply = myapply    // bind    function mybind(that) &#123;        let fn = this;        return function (...args) &#123;            fn.apply(that, args);        &#125;    &#125;    Function.prototype.mybind = mybind    // new    function myNew(fn, ...args) &#123;        let obj = Object.create(fn.prototype);        fn.apply(obj, args);        return obj;    &#125;    // instanceof实现    function instanceOf(origin, target) &#123;        while (1) &#123;            if (origin.__proto__ == target.prototype) &#123;                return true            &#125;            if (origin.__proto__ == null) &#123;                return false            &#125;            origin = origin.__proto__        &#125;    &#125;    // 数组乱序    function shuffle(arr) &#123;        let len = arr.length;        for (let i = 0; i &lt; len - 1; i++) &#123;            let index = parseInt(Math.random() * (len - i));            let temp = arr[index];            arr[index] = arr[len - i - 1];            arr[len - i - 1] = temp;        &#125;        return arr;    &#125;    // 随机字串    function randomString(len) &#123;        len = len || 8;        let $chars = &#39;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#39;;    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/        let maxPos = $chars.length;        let str = &#39;&#39;;        for (let i = 0; i &lt; len; i++) &#123;            str += $chars.charAt(Math.floor(Math.random() * maxPos));        &#125;        return str;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现对象深拷贝函数</title>
      <link href="/2022/09/29/js-deepClone/"/>
      <url>/2022/09/29/js-deepClone/</url>
      
        <content type="html"><![CDATA[<h3 id="实现对象深拷贝函数"><a href="#实现对象深拷贝函数" class="headerlink" title="实现对象深拷贝函数"></a>实现对象深拷贝函数</h3><p><strong>ps:</strong> <em><code>深拷贝</code>需要根据不同的类型值进行不同的拷贝特性,Reg对象的一些属性拷贝，</em></p><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    // 判断是否是某类型    const isType = (obj, type) =&gt; &#123;        if (typeof obj !== &#39;object&#39;) return false;        const typeString = Object.prototype.toString.call(obj);        let flag;        switch (type) &#123;            case &#39;Array&#39;:            flag = typeString === &#39;[object Array]&#39;;            break;            case &#39;Date&#39;:            flag = typeString === &#39;[object Date]&#39;;            break;            case &#39;RegExp&#39;:            flag = typeString === &#39;[object RegExp]&#39;;            break;            default:            flag = false;        &#125;        return flag;        &#125;;        // 获取到正则修饰符        const getRegExp = re =&gt; &#123;        var flags = &#39;&#39;;        if (re.global) flags += &#39;g&#39;;        if (re.ignoreCase) flags += &#39;i&#39;;        if (re.multiline) flags += &#39;m&#39;;        return flags;        &#125;;        // 深度克隆        const deepClone = parent =&gt; &#123;        // 旧对象 ：新对象 map        let _map = new WeakMap();                const _clone = parent =&gt; &#123;            if (parent === null) return null;            if (typeof parent !== &#39;object&#39;) return parent;            if (_map.get(parent)) return _map.get(parent);                        let newParent;            if (isType(parent, &#39;Array&#39;)) &#123;                // 对数组做特殊处理                newParent = [];            &#125; else if (isType(parent, &#39;RegExp&#39;)) &#123;                // 对正则对象做特殊处理                newParent = new RegExp(parent.source, getRegExp(parent));                if (parent.lastIndex) &#123;                    newParent.lastIndex = parent.lastIndex;                &#125;            &#125; else if (isType(parent, &#39;Date&#39;)) &#123;                // 对Date对象做特殊处理                newParent = new Date(parent.getTime());            &#125; else &#123;                // 处理对象原型                newParent = Object.create(parent.__proto__);            &#125;                        // 把索引对象存储，原来对象：拷贝后的对象，可能内部会互相引用            _map.set(parent, newParent);            for (let i in parent) &#123;                // 递归                newParent[i] = _clone(parent[i]);            &#125;                    return newParent;        &#125;;        return _clone(parent);    &#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>照猫画虎之实现Promise</title>
      <link href="/2022/09/29/js-promiseDemo/"/>
      <url>/2022/09/29/js-promiseDemo/</url>
      
        <content type="html"><![CDATA[<h3 id="照猫画虎之实现Promise"><a href="#照猫画虎之实现Promise" class="headerlink" title="照猫画虎之实现Promise"></a>照猫画虎之实现Promise</h3><p><strong>ps:</strong> <em>简单的模拟实现一下<code>Promise</code>，好像只是行到意不到…hhh~</em></p><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">  // promise(丑陋的)    class UglyPromise &#123;        constructor(callback)&#123;            this.status = &#39;pending&#39;            this.value = undefined            this.sucessCb = []            this.failedCb = []                        const resolve = value =&gt; &#123;            if(this.status === &#39;pending&#39;)&#123;                this.status = &#39;success&#39;                this.value = value                this.sucessCb.forEach(fn =&gt; &#123;                fn(value)                &#125;)            &#125;            &#125;                        const reject = value =&gt; &#123;            if(this.status === &#39;pending&#39;)&#123;                this.status = &#39;failed&#39;                this.value = value                this.failedCb.forEach(fn =&gt; &#123;                fn(value)                &#125;)            &#125;            &#125;                        try &#123;            callback(resolve, reject)            &#125; catch(e) &#123;            reject(e)            &#125;        &#125;            then(successCb, failedCb)&#123;                        if(typeof successCb === &#39;function&#39;)&#123;            if(this.status == &#39;pending&#39;)&#123;                this.sucessCb.push(successCb)            &#125;else&#123;                successCb(this.value)            &#125;            &#125;            if(typeof failedCb === &#39;function&#39;)&#123;                        if(this.status == &#39;pending&#39;)&#123;                this.failedCb.push(failedCb)            &#125;else&#123;                failedCb(this.value)            &#125;            &#125;                        return this        &#125;                catch(failedCb)&#123;            if(typeof failedCb === &#39;function&#39;)&#123;            if(this.status == &#39;pending&#39;)&#123;                this.failedCb.push(failedCb)            &#125;else&#123;                failedCb(this.value)            &#125;            &#125;        &#125;            &#125;     UglyPromise.resolve = value =&gt;&#123;        return new UglyPromise(rev =&gt; &#123;        rev(value)        &#125;)    &#125;        UglyPromise.race = arr =&gt;&#123;        return new MyPromise((rev,rej) =&gt; &#123;        for(let i = 0;i &lt; arr.length;i++)&#123;            arr[i].then(res =&gt; &#123;            rev(res)            &#125;).catch(e =&gt; &#123;            rej(e)            &#125;)        &#125;        &#125;)    &#125;        UglyPromise.all = arr =&gt;&#123;        let length = arr.length;        let count = 0;        let result = new Array(length);        if(length == 0)&#123;            return UglyPromise.resolve()        &#125;        return new UglyPromise((rev,rej) =&gt; &#123;        for(let i = 0;i&lt;arr.length;i++)&#123;            arr[i].then(res =&gt; &#123;            result[i] = res // 为了结果顺序与开始顺序一致            if(++count == length)&#123;                rev(result)            &#125;            &#125;).catch(e =&gt; &#123;            rej(e)            &#125;)        &#125;        &#125;)    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现Demo之CSS3d多面体</title>
      <link href="/2022/09/28/html-css3Multilateral/"/>
      <url>/2022/09/28/html-css3Multilateral/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS3d多面体"><a href="#CSS3d多面体" class="headerlink" title="CSS3d多面体"></a>CSS3d多面体</h3><p><strong>ps:</strong> <em>简单探索css3的3d属性，制作一个立体的多面体结构的自动轮播，可以根据手势进行左右拖拽，简易Demo如下</em></p><h4 id="css-Code"><a href="#css-Code" class="headerlink" title="css Code"></a>css Code</h4><pre><code class="css">    /*n边形的外角和为360  360/n            n变形的内角 180 - 360/n*/    * &#123;        margin: 0;        padding: 0;    &#125;    html,    body &#123;        background-image: radial-gradient(#fff, #000);        height: 100%;        overflow: hidden;    &#125;    #wrap &#123;        position: absolute;        left: 0;        top: 0;        right: 0;        bottom: 0;        margin: auto;        width: 300px;        height: 300px;        /*border: 1px solid;*/        perspective: 1000px;        user-select: none;    &#125;    #wrap&gt;.box &#123;        position: absolute;        left: 0;        top: 0;        right: 0;        bottom: 0;        margin: auto;        width: 300px;        height: 300px;        transition: 10s transform;        transform-style: preserve-3d;        animation-name: rotate;        animation-duration: 48s;        animation-timing-function: linear;        animation-iteration-count: infinite;        animation-fill-mode: forwards;    &#125;    #wrap&gt;.box&gt;div &#123;        position: absolute;        width: 300px;        height: 300px;        background: rgba(0, 0, 0, 0.1);        text-align: center;        font: 50px/300px &quot;微软雅黑&quot;;        backface-visibility: visible;    &#125;    @keyframes rotate &#123;        form &#123;            transform: rotateY(var(--beginDeg));        &#125;        to &#123;            transform: rotateY(var(--endDeg));        &#125;    &#125;    #wrap:hover&gt;.box &#123;        animation-play-state: paused;    &#125;</code></pre><h4 id="html-Code"><a href="#html-Code" class="headerlink" title="html Code"></a>html Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;CSS3d多面体&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;--beginDeg:0deg;--endDeg:360deg;&quot;&gt;    &lt;div id=&quot;wrap&quot;&gt;        &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">   //n：棱数    window.onload = function () &#123;        createLZ(11);        var down = false;        var startX = 0;        var baseRotate = 0;        var currentRotate = 0;        var wrap = document.getElementById(&#39;wrap&#39;);        var body = document.body;        var boxNode = document.querySelector(&quot;#wrap &gt; .box&quot;);        // wrap元素鼠标按下滑动事件        wrap.onmousedown = function (e) &#123;            down = true            startX = e.clientX;        &#125;        wrap.onmousemove = function (e) &#123;            if (down) &#123;                currentRotate = baseRotate + (e.clientX - startX) / 10;                boxNode.style.transform = &quot;rotateY(&quot; + currentRotate + &quot;deg)&quot;;            &#125;        &#125;        window.onmouseup = function (e) &#123;            baseRotate = currentRotate;            down = false;            body.style.cssText = &quot;--beginDeg:&quot; + currentRotate + &quot;deg;--endDeg:&quot; + (currentRotate + 360) + &quot;deg;&quot;;        &#125;    &#125;    function createLZ(n) &#123;        var boxNode = document.querySelector(&quot;#wrap &gt; .box&quot;);        var stlyleNode = document.createElement(&quot;style&quot;);        //外角        var degOut = 360 / n;        //内角        var degIn = 180 - 360 / n;        var text = &quot;&quot;;        var cssText = &quot;&quot;;        for (var i = 0; i &lt; n; i++) &#123;            text += &quot;&lt;div&gt;&lt;/div&gt;&quot;;            cssText += `#wrap &gt; .box &gt; div:nth-child($&#123;i + 1&#125;)&#123;transform: rotateY($&#123;i * degOut&#125;deg);background: url(./img/$&#123;i&#125;.jpeg) center no-repeat;&#125;`;        &#125;        boxNode.innerHTML = text;        var mianNode = document.querySelector(&quot;#wrap &gt; .box &gt; div&quot;);        //棱长        var length = mianNode.offsetWidth;        cssText += &quot;#wrap &gt; .box&#123;transform-origin: center center -&quot; + (length / 2 * Math.tan((degIn / 2) * Math.PI / 180)) + &quot;px;&#125;&quot;;        cssText += &quot;#wrap &gt; .box &gt; div&#123;transform-origin: center center -&quot; + (length / 2 * Math.tan((degIn / 2) * Math.PI / 180)) + &quot;px;&#125;&quot;;        stlyleNode.innerHTML = cssText;        document.head.appendChild(stlyleNode);    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现Demo之H5幸运大转盘</title>
      <link href="/2022/09/28/html-lottery/"/>
      <url>/2022/09/28/html-lottery/</url>
      
        <content type="html"><![CDATA[<h3 id="H5幸运大转盘"><a href="#H5幸运大转盘" class="headerlink" title="H5幸运大转盘"></a>H5幸运大转盘</h3><h4 id="css-Code"><a href="#css-Code" class="headerlink" title="css Code"></a>css Code</h4><pre><code class="css">    * &#123;        margin: 0;        padding: 0;    &#125;    .container &#123;        background-image: url(./wheel-bodybg.png);        background-size: 100% 100%;        min-height: 100vh;        display: flex;        justify-content: center;        align-items: center;    &#125;    .wheel &#123;        width: 800px;        height: 800px;        position: relative;        background-image: url(./wheel-bg.png);        background-size: 100% 100%;        display: flex;        justify-content: center;        align-items: center;    &#125;    .wheel-light &#123;        background-image: url(./wheel-bg2.png) !important;    &#125;    #wheelCanvas &#123;        width: 700px;        height: 700px;    &#125;    .transition &#123;        transition: all 2s;    &#125;    .pointer &#123;        display: block;        position: absolute;        width: 200px;        height: 200px;        background-color: transparent;        background-image: url(./wheel-pointer.png);        background-repeat: no-repeat;        background-size: contain;        background-position: center;        border: none;        outline: none;    &#125;    .pointer-animation &#123;        animation: scale 1s infinite linear alternate;    &#125;    @keyframes scale &#123;        0% &#123;            transform: scale(1);        &#125;        100% &#123;            transform: scale(1.1);        &#125;    &#125;</code></pre><h4 id="html-Code"><a href="#html-Code" class="headerlink" title="html Code"></a>html Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;幸运大转盘&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;wheel&quot;&gt;            &lt;canvas id=&quot;wheelCanvas&quot; width=&quot;600px&quot; height=&quot;600px&quot;&gt;&lt;/canvas&gt;            &lt;button class=&quot;pointer pointer-animation&quot; id=&quot;getAward&quot;&gt;&lt;/button&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    //抽奖转盘    var turnWheel = &#123;        reaward: [            &#123; name: &#39;380元优惠券&#39;, icon: &#39;https://mdhw.oss-cn-hangzhou.aliyuncs.com/signAward/1649132281714_4Y5c6zXd.png&#39; &#125;,            &#123; name: &#39;谢谢参与&#39;, icon: &#39;&#39; &#125;,            &#123; name: &#39;30积分&#39;, icon: &#39;https://mdhw.oss-cn-hangzhou.aliyuncs.com/signAward/1649132281714_4Y5c6zXd.png&#39; &#125;,            &#123; name: &#39;谢谢参与&#39;, icon: &#39;&#39; &#125;,            &#123; name: &#39;10积分&#39;, icon: &#39;https://mdhw.oss-cn-hangzhou.aliyuncs.com/signAward/1649132281714_4Y5c6zXd.png&#39; &#125;,            &#123; name: &#39;谢谢参与&#39;, icon: &#39;&#39; &#125;,        ], //转盘奖品        colors: [], //转盘奖品区块对应背景颜色        fontColor: &#39;#f00&#39;, //转盘奖品字体颜色        radius: 300, //转盘半径        textRadius: 320, //转盘奖品位置距离圆心的距离    &#125;;    var timer = null;    var turning = false;    var wheelCanvas = document.getElementById(&quot;wheelCanvas&quot;);    turnWheel.reaward = turnWheel.reaward.map(d =&gt; &#123;        let img = new Image();        img.src = d.icon;        d.icon = img        return d    &#125;)    turnWheel.colors = [        &quot;#eecffe&quot;,        &quot;#FFFFFF&quot;,        &quot;#eecffe&quot;,        &quot;#FFFFFF&quot;,        &quot;#eecffe&quot;,        &quot;#FFFFFF&quot;,    ];    window.onload = function () &#123;        drawWheelCanvas(&#39;wheelCanvas&#39;, turnWheel);        var getAward = document.getElementById(&quot;getAward&quot;);        var index = 0; // 中奖将品的数组下标        getAward.addEventListener(&quot;click&quot;, function () &#123;            if (turning) &#123;                return;            &#125;            turning = true;            index = Math.floor(Math.random() * turnWheel.reaward.length);            wheelCanvas.classList.add(&quot;transition&quot;);            twinkle(() =&gt; &#123;                alert(&#39;中奖奖品下标：&#39; + index);            &#125;);            rotateWheel(index, turnWheel.reaward.length)        &#125;)    &#125;;    // 转盘灯闪烁 callback为抽奖结果后执行函数    function twinkle(callback) &#123;        let wheel = document.querySelector(&#39;.wheel&#39;);        let pointer = document.querySelector(&#39;.pointer&#39;);        pointer.classList.remove(&#39;pointer-animation&#39;);        timer = setInterval(() =&gt; &#123;            wheel.classList.toggle(&#39;wheel-light&#39;);        &#125;, 200);        setTimeout(() =&gt; &#123;            turning = false;            wheelCanvas.classList.remove(&#39;transition&#39;);            wheel.classList.remove(&#39;wheel-light&#39;);            pointer.classList.add(&#39;pointer-animation&#39;);            wheelCanvas.style.transform = &#39;rotate(0deg)&#39;;            timer &amp;&amp; clearInterval(timer);            typeof callback === &#39;function&#39; &amp;&amp; callback();        &#125;, 2000);    &#125;    // 旋转转盘 (index:中奖将品的数组下标)    function rotateWheel(awardIndex, awardCount) &#123;        let baseAngle = 360 / awardCount;        let rotateRound = 360 * 5; // 每次旋转5圈        wheelCanvas.style.transform = &#39;rotate(&#39; + ((270 - ((baseAngle / 2) + baseAngle * awardIndex)) + rotateRound) + &#39;deg)&#39;;    &#125;    // 绘制转盘    function drawWheelCanvas(canvasId, turnWheel) &#123;        let canvas = document.getElementById(canvasId);        let baseAngle = Math.PI * 2 / (turnWheel.reaward.length);        let ctx = canvas.getContext(&quot;2d&quot;);        let canvasW = canvas.width; // 画板的高度        let canvasH = canvas.height; // 画板的宽度        ctx.fillStyle = &quot;#fff000&quot;;        ctx.clearRect(0, 0, canvasW, canvasH);//去掉背景默认的黑色        ctx.font = &#39;26px Microsoft YaHei&#39;;        for (let index = 0; index &lt; turnWheel.reaward.length; index++) &#123;            let angle = index * baseAngle;            let rewardName = turnWheel.reaward[index].name;            let translateX = canvasW * 0.5 + Math.cos(angle + baseAngle / 2) * turnWheel.textRadius;            let translateY = canvasH * 0.5 + Math.sin(angle + baseAngle / 2) * turnWheel.textRadius;            ctx.fillStyle = turnWheel.colors[index];            ctx.beginPath();            ctx.arc(canvasW * 0.5, canvasH * 0.5, turnWheel.radius, angle, angle + baseAngle, false);            ctx.lineTo(canvasW * 0.5, canvasH * 0.5);            ctx.fill();            ctx.save();            ctx.fillStyle = turnWheel.fontColor;            ctx.translate(translateX, translateY);            ctx.rotate(angle + baseAngle / 2 + Math.PI / 2);            ctx.fillText(rewardName, -ctx.measureText(rewardName).width / 2, 100);            //添加对应图标            if (turnWheel.reaward[index] &amp;&amp; turnWheel.reaward[index].icon) &#123;                ctx.drawImage(turnWheel.reaward[index].icon, -40, 140, 80, 80);            &#125;            ctx.restore(); //很关键        &#125;    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现图片懒加载</title>
      <link href="/2022/09/28/html-imgLazyLoad/"/>
      <url>/2022/09/28/html-imgLazyLoad/</url>
      
        <content type="html"><![CDATA[<h3 id="实现图片懒加载"><a href="#实现图片懒加载" class="headerlink" title="实现图片懒加载"></a>实现图片懒加载</h3><p><strong>ps:</strong> <em>简单探索下<code>IntersectionObserver</code>这个api，可以监听元素是否出现在可视窗口，利用这个特性以及dataset实现图片懒加载,简易Demo如下</em></p><h4 id="html-Code"><a href="#html-Code" class="headerlink" title="html Code"></a>html Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;        &lt;title&gt;&lt;/title&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;        &lt;style&gt;            ul&#123;                list-style: none;            &#125;            img&#123;                width: 200px;                height: 200px;                background: #ddd;            &#125;        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;ul&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2943125063,3292210397&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2024373923,2140139723&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097108640&amp;di=85ad12ff7eb7f9572016612de1135925&amp;imgtype=0&amp;src=http%3A%2F%2Fa-ssl.duitang.com%2Fuploads%2Fitem%2F201407%2F18%2F20140718063817_s3Gnz.gif&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097122497&amp;di=1dff2a1a87c795199973d6f351ab88c6&amp;imgtype=0&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D1120712552%2C1362700559%26fm%3D214%26gp%3D0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097135282&amp;di=bbb17f186fa620e910ad079e5f998711&amp;imgtype=0&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D2230676464%2C2378994766%26fm%3D214%26gp%3D0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097163421&amp;di=8cd014f555709f796fe643adde44afc3&amp;imgtype=0&amp;src=http%3A%2F%2Fb.hiphotos.baidu.com%2Fzhidao%2Fpic%2Fitem%2Fa044ad345982b2b7014e90fe33adcbef76099b33.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097184425&amp;di=4dbac84b3f735da758433becd9d4e9ee&amp;imgtype=0&amp;src=http%3A%2F%2Fcdn.duitang.com%2Fuploads%2Fitem%2F201407%2F13%2F20140713000933_dC2z3.thumb.700_0.gif&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097216523&amp;di=e3393b6449183d29f689e10783c9694b&amp;imgtype=0&amp;src=http%3A%2F%2Fimgsrc.baidu.com%2Fforum%2Fw%253d580%2Fsign%3D2b04e747fd1f4134e0370576151e95c1%2F05460b2442a7d933458f9ed7ad4bd11372f00167.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=149701518,1608548313&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2692023635,939588326&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=268907504,1715864470&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1603097268873&amp;di=0ec97e5a4185af04869e5f150a1bf18d&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20171129%2Ff510b6d293264e0cba3072353e5eb067.gif&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=366871761,2360018043&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3251940718,1404860427&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2476878483,4014399276&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2055680573,3089421073&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;       &lt;li&gt;&lt;img data-src=&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3926221861,1230045557&amp;fm=26&amp;gp=0.jpg&quot; &gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">  var imglist = document.querySelectorAll(&#39;img&#39;)  var observer = new IntersectionObserver(entries=&gt;&#123;      entries.forEach(entry=&gt;&#123;          if(entry.intersectionRatio&gt;0)&#123;              entry.target.src = entry.target.dataset.src              observer.unobserve(entry.target)          &#125;      &#125;)  &#125;)  imglist.forEach(imgitem=&gt;&#123;      observer.observe(imgitem)  &#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出之拖拽事件</title>
      <link href="/2022/09/28/vue-exploreDrag/"/>
      <url>/2022/09/28/vue-exploreDrag/</url>
      
        <content type="html"><![CDATA[<h3 id="深入浅出之拖拽事件"><a href="#深入浅出之拖拽事件" class="headerlink" title="深入浅出之拖拽事件"></a>深入浅出之拖拽事件</h3><p><strong>ps:</strong> <em>简单探索下drag事件，把一些元素拉到目标区域，还可从目标区域拉回原来区域，简易Demo如下</em></p><h4 id="vue-Code"><a href="#vue-Code" class="headerlink" title="vue Code"></a>vue Code</h4><pre><code class="vue">&lt;template&gt;  &lt;div class=&quot;app-container&quot;&gt;    &lt;div class=&quot;table-container&quot;&gt;      &lt;el-row :gutter=&quot;20&quot;&gt;        &lt;el-col :span=&quot;4&quot;&gt;          &lt;div class=&quot;drag-from-zone&quot;&gt;            &lt;div              class=&quot;drag-item&quot;              v-for=&quot;(item, idx) in list&quot;              :key=&quot;idx&quot;              draggable=&quot;true&quot;              @dragstart=&quot;dragstart($event, item, idx)&quot;              @dragend=&quot;dragend($event)&quot;            &gt;              &#123;&#123; item.name &#125;&#125;            &lt;/div&gt;          &lt;/div&gt;        &lt;/el-col&gt;        &lt;el-col :span=&quot;20&quot;&gt;          &lt;div            id=&quot;target&quot;            @dragover=&quot;dragover($event)&quot;            @drop=&quot;drop($event)&quot;            class=&quot;drag-target-zone&quot;          &gt;            &lt;div              class=&quot;drag-item&quot;              v-for=&quot;(item, idx) in targetList&quot;              :key=&quot;idx&quot;              @dragstart=&quot;dragstart($event, item)&quot;              @dragend=&quot;dragend($event)&quot;            &gt;              &#123;&#123; item.name &#125;&#125;              &lt;i class=&quot;el-icon-close&quot; @click=&quot;removeItem(item)&quot;&gt;&lt;/i&gt;            &lt;/div&gt;          &lt;/div&gt;        &lt;/el-col&gt;      &lt;/el-row&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;var tmpData;export default &#123;  data() &#123;    return &#123;      list: [        &#123; id: 1, name: &quot;元素1&quot; &#125;,        &#123; id: 2, name: &quot;元素2&quot; &#125;,        &#123; id: 3, name: &quot;元素3&quot; &#125;,        &#123; id: 4, name: &quot;元素4&quot; &#125;,        &#123; id: 5, name: &quot;元素5&quot; &#125;,        &#123; id: 6, name: &quot;元素6&quot; &#125;,        &#123; id: 7, name: &quot;元素7&quot; &#125;,        &#123; id: 8, name: &quot;元素8&quot; &#125;,        &#123; id: 9, name: &quot;元素9&quot; &#125;,        &#123; id: 10, name: &quot;元素10&quot; &#125;,      ],      targetList: [],    &#125;;  &#125;,  methods: &#123;    dragstart(e, item) &#123;      //拖拽开始时将item存入vuex      console.log(&quot;拖拽开始 =&gt;&quot;, item);      tmpData = item;    &#125;,    dragend(e) &#123;      //拖拽结束执行的事件      console.log(&quot;拖拽结束 =&gt;&quot;, e);    &#125;,    dragover(e) &#123;      //拖拽在这个div里面拖拽时执行的事件      //一定要执行preventDefault(),否则drop事件不会被触发      e.preventDefault();    &#125;,    drop(e) &#123;      //在div里拖拽停止时执行的事件      this.list = this.list.filter((item) =&gt; item.id !== tmpData.id);      this.targetList.push(tmpData);    &#125;,    removeItem(data)&#123;      this.targetList = this.targetList.filter((item) =&gt; item.id !== data.id);      this.list.push(data);    &#125;,  &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;.drag-from-zone &#123;  display: flex;  flex-direction: column;  align-items: center;&#125;.drag-item &#123;  display: inline-block;  padding: 10px 5px;  cursor: pointer;  border: 1px solid #ccc;  margin-bottom: 10px;&#125;.drag-target-zone &#123;  height: 500px;  border: 1px solid #ccc;&#125;&lt;/style&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现Demo之滚动信息展示/弹幕</title>
      <link href="/2022/09/28/html-flutterAnimation/"/>
      <url>/2022/09/28/html-flutterAnimation/</url>
      
        <content type="html"><![CDATA[<h3 id="弹幕飘屏-amp-一个横框内的滚动信息展示"><a href="#弹幕飘屏-amp-一个横框内的滚动信息展示" class="headerlink" title="弹幕飘屏&amp;一个横框内的滚动信息展示"></a>弹幕飘屏&amp;一个横框内的滚动信息展示</h3><p><strong>ps:</strong> <em>实现一个展示给用户信息的横幅条，比如xxx购买了xxx产品真种滚屏信息或者弹幕效果，简易Demo如下</em></p><h4 id="html-Code"><a href="#html-Code" class="headerlink" title="html Code"></a>html Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Demo之滚动信息展示/弹幕&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!-- 把选择器传入到下面的js函数中即可 --&gt;    &lt;div id=&quot;walk&quot;&gt;&lt;/div&gt;     &lt;div id=&quot;danmaku&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code-For-竖向滚动信息条"><a href="#js-Code-For-竖向滚动信息条" class="headerlink" title="js Code For 竖向滚动信息条"></a>js Code For 竖向滚动信息条</h4><pre><code class="js">    function Walk(&#123;    selector,    speed = 1,    data = [],    danweiLucheng,&#125;) &#123;    this.dom = document.querySelector(selector);    this.data = data;    this.speed = speed;    this.danweiLucheng = danweiLucheng;    this.timer = null;    this.init();    this.render();&#125;;Walk.prototype.render = function () &#123;    let htmlStr = &#39;&#39;;    this.data.concat(this.data[0]).forEach(d =&gt; &#123;        htmlStr += `&lt;div class=&quot;walking-item&quot;&gt;                        &lt;div class=&quot;walking-text&quot;&gt;$&#123;d.message&#125;&lt;/div&gt;                        &lt;img class=&quot;walking-img&quot;                            src=&quot;$&#123;d.icon&#125;&quot;&gt;                    &lt;/div&gt;`;    &#125;);    this.dom.innerHTML = htmlStr;&#125;;Walk.prototype.init = function () &#123;    this.index = 0;    this.lucheng = 0;    this.storeLucheng = 0;&#125;;Walk.prototype.playFrame = function () &#123;    setTimeout(() =&gt; &#123;        this.lucheng = this.storeLucheng;        this.timer = setInterval(() =&gt; &#123;            this.lucheng += this.speed;            this.dom.style.transform = `translate3d(0, -$&#123;this.lucheng&#125;px, 0)`;            if (this.lucheng - this.storeLucheng &gt;= this.danweiLucheng) &#123;                this.index++; //第一个动画结束，index下标下移                this.storeLucheng = this.lucheng;                if (this.index &gt;= this.data.length) &#123;                    this.dom.style.transform = &#39;translate3d(0, 0, 0)&#39;;                    this.init();                &#125;                clearInterval(this.timer);                this.playFrame();            &#125;        &#125;, 20)    &#125;, 1500)&#125;;</code></pre><h4 id="js-Code-For-弹幕"><a href="#js-Code-For-弹幕" class="headerlink" title="js Code For 弹幕"></a>js Code For 弹幕</h4><pre><code class="js">; (function () &#123;    var Danmaku = window.Danmaku = function (&#123;        selector,        data = [],        speed = 1,        itemWidth = 180,        itemHeigth = 30,        spaceWidth = 50,    &#125;) &#123;        this.dom = document.querySelector(selector);        this.data = data;        this.speed = speed;        this.itemWidth = itemWidth;        this.itemHeigth = itemHeigth;        this.offsetWidth = this.data.length * this.itemWidth + (this.data.length - 1) * spaceWidth;        this.currentOffset = this.initOffset = window.innerWidth;        this.spaceWidth = spaceWidth;        this.init();        this.render();    &#125;    Danmaku.prototype.init = function () &#123;        this.currentOffset = this.initOffset;        this.dom.style.cssText = `width:$&#123;this.offsetWidth&#125;px;display:flex;background:transparent;transform:translate3d($&#123;this.initOffset&#125;px,0,0)`;    &#125;    Danmaku.prototype.render = function () &#123;        let htmlStr = &#39;&#39;;        let styleDom = document.createElement(&#39;style&#39;);        styleDom.innerHTML = `            .danmaku-item&#123;                width:$&#123;this.itemWidth&#125;px;                line-height:$&#123;this.itemHeigth&#125;px;                display:flex;                font-size: 12px;                color: #fff;                background: rgba(0, 0, 0, 0.7);                border-radius: $&#123;this.itemHeigth / 2&#125;px;                align-items: center;                margin-right: $&#123;this.spaceWidth&#125;px;                padding: 0 10px;            &#125;            .danmaku-item:nth-child(odd)&#123;                transform:translate3d(0,$&#123;this.itemHeigth / 3&#125;px,0);            &#125;            .danmaku-item:nth-child(even)&#123;                transform:translate3d(0,-$&#123;this.itemHeigth / 3&#125;px,0);            &#125;            .danmaku-text&#123;                flex: 1;                white-space: nowrap;                overflow: hidden;                text-overflow: ellipsis;                word-break: break-all;            &#125;            .danmaku-img&#123;                width: 26px;                height: 26px;                border-radius: 13px;                object-fit: contain;                margin-right: 10px;            &#125;            `;        document.head.appendChild(styleDom);        this.data.forEach(d =&gt; &#123;            htmlStr += `&lt;div class=&quot;danmaku-item&quot;&gt;                            &lt;img class=&quot;danmaku-img&quot; src=&quot;$&#123;d.icon&#125;&quot;&gt;                            &lt;div class=&quot;danmaku-text&quot;&gt;$&#123;d.time&#125; 获得了星耀款&lt;/div&gt;                        &lt;/div&gt;`;        &#125;);        this.dom.innerHTML = htmlStr;    &#125;;    Danmaku.prototype.playFrame = function () &#123;        this.currentOffset -= this.speed;        this.dom.style.transform = `translate3d($&#123;this.currentOffset&#125;px,0,0)`;        if (this.currentOffset &lt;= -this.offsetWidth) &#123;            this.init();        &#125;        requestAnimationFrame(() =&gt; &#123;            this.playFrame();        &#125;)    &#125;&#125;)();</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现Demo之自动轮播加手势滑动偏移</title>
      <link href="/2022/09/28/html-autoCarouselWithHand/"/>
      <url>/2022/09/28/html-autoCarouselWithHand/</url>
      
        <content type="html"><![CDATA[<h3 id="自动轮播加手势滑动偏移"><a href="#自动轮播加手势滑动偏移" class="headerlink" title="自动轮播加手势滑动偏移"></a>自动轮播加手势滑动偏移</h3><p><strong>ps:</strong> <em>实现一个商品展示自动循环轮播，且用户可以通过手势来控制左右滑动，简易Demo如下</em></p><h4 id="css-Code"><a href="#css-Code" class="headerlink" title="css Code"></a>css Code</h4><pre><code class="css">    * &#123;        padding: 0;        margin: 0;    &#125;    html,    body &#123;        width: 100%;        height: 100%;        overflow: hidden;    &#125;    .container &#123;        width: 100%;        height: 100%;        display: flex;        align-items: center;        justify-content: center;    &#125;    .awrad_outer &#123;        width: 300px;        overflow: hidden;    &#125;    .awrad_list &#123;        width: 900px;        overflow: hidden;    &#125;    .award_list_item &#123;        float: left;        background-color: skyblue;        width: 100px;        height: 100px;        line-height: 100px;        text-align: center;        font-size: 20px;        font-weight: bold;    &#125;</code></pre><h4 id="html-Code"><a href="#html-Code" class="headerlink" title="html Code"></a>html Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Demo之自动轮播加手势滑动偏移&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;awrad_outer&quot;&gt;            &lt;div class=&quot;awrad_list&quot;&gt;                &lt;div class=&quot;award_list_item&quot;&gt;1&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;2&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;3&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;4&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;5&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;6&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;7&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;8&lt;/div&gt;                &lt;div class=&quot;award_list_item&quot;&gt;9&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    var awrad_outer = document.querySelector(&#39;.awrad_outer&#39;);    var awrad_list = document.querySelector(&#39;.awrad_list&#39;);    var offsetVal = 0;    var downX = null;    function move() &#123;        if (downX != null) &#123;            return;        &#125;        offsetVal--;        if (offsetVal &lt;= -600) &#123;            offsetVal = 0;        &#125;        awrad_list.style.transform = `translateX($&#123;offsetVal&#125;px)`;        requestAnimationFrame(move)    &#125;    move();    awrad_outer.addEventListener(&#39;touchstart&#39;, function (e) &#123;        downX = e.targetTouches[0].clientX;    &#125;)    awrad_outer.addEventListener(&#39;touchmove&#39;, function (e) &#123;        let clientX = e.targetTouches[0].clientX;        offsetVal += clientX - downX;        downX = clientX; // 修正参照值        if (offsetVal &gt; 0) &#123;            offsetVal = 0;        &#125; else if (offsetVal &lt; -600) &#123;            offsetVal = -600;        &#125;        awrad_list.style.transform = `translateX($&#123;offsetVal&#125;px)`;    &#125;)    awrad_outer.addEventListener(&#39;touchend&#39;, function (e) &#123;        downX = null;        move();    &#125;)</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实现Demo之大转盘三连中</title>
      <link href="/2022/09/27/html-lotteryThreeCount/"/>
      <url>/2022/09/27/html-lotteryThreeCount/</url>
      
        <content type="html"><![CDATA[<h3 id="点击抽奖大转盘三连中"><a href="#点击抽奖大转盘三连中" class="headerlink" title="点击抽奖大转盘三连中"></a>点击抽奖大转盘三连中</h3><p><strong>ps:</strong> <em>实现一个抽奖大转盘抽奖三连中，通过canvas来绘制奖品的转盘，其他的背景通过html标签实现，简易Demo如下</em></p><h4 id="html-amp-css-Code"><a href="#html-amp-css-Code" class="headerlink" title="html&amp;css Code"></a>html&amp;css Code</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Demo之大转盘三连中&lt;/title&gt;    &lt;style&gt;        * &#123;            margin: 0;            padding: 0;        &#125;        html,        body &#123;            width: 100%;            height: 100%;            overflow: hidden;        &#125;        .container &#123;            width: 100%;            height: 100%;            overflow-x: hidden;            overflow-y: scroll;        &#125;        .canvas-wrapper &#123;            position: relative;        &#125;        .button &#123;            background: transparent;            outline: none;            border: none;            display: block;            position: absolute;            left: 0;            right: 0;            top: 56vh;            border-radius: 50%;            margin: 0 auto;            width: 100px;            height: 100px;        &#125;        #canvas &#123;            display: block;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;canvas-wrapper&quot;&gt;            &lt;!-- 抽奖按钮 --&gt;            &lt;button class=&quot;button&quot;&gt;&lt;/button&gt;            &lt;!-- canvas根据奖品数据绘制奖品圆盘 --&gt;            &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;        &lt;/div&gt;        &lt;div&gt;信息&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="js-Code"><a href="#js-Code" class="headerlink" title="js Code"></a>js Code</h4><pre><code class="js">    // 获取像素比 高清cavas    function getPixelRatio(context) &#123;        var backingStore = context.backingStorePixelRatio ||            context.webkitBackingStorePixelRatio ||            context.mozBackingStorePixelRatio ||            context.msBackingStorePixelRatio ||            context.oBackingStorePixelRatio ||            context.backingStorePixelRatio || 1;        return (window.devicePixelRatio || 1) / backingStore;    &#125;;    // 公共类    function Wheel() &#123;        let cav = document.getElementById(&#39;canvas&#39;);        this.pointerRange = [];        this.pointerIndex = 0;        this.turned = []; //已经转中的下标数组        this.turnTargetRotate = []; //要转的目的数组        this.turnedCount = 0; // 转盘次数        this.startTurn = false; // 开始抽        this.delay = 20;        this.speed = 1; //转速        this.ctx = cav.getContext(&#39;2d&#39;);        this.ratio = getPixelRatio(this.ctx);        this.w = window.innerWidth;        this.h = window.innerHeight;        cav.style.width = this.w + &#39;px&#39;;        cav.style.height = this.h + &#39;px&#39;;        cav.width = this.w * this.ratio;        cav.height = this.h * this.ratio;    &#125;    Wheel.prototype.updatePointerIndex = function (rotate) &#123;        let rotateV = rotate % 360;        let index = this.pointerRange.findIndex(d =&gt; rotateV &lt; d);        this.pointerIndex = index == -1 ? 0 : index;    &#125;    // 转盘类    function AwardRound(&#123;        cx,        cy,        cr = 100,        data = []    &#125;) &#123;        let angleStore = 0;        let sum = 0;        this.cx = cx * wheel.ratio;        this.cy = cy * wheel.ratio;        this.cr = cr * wheel.ratio;        this.count = data.length;        this.data = data.map((d, i) =&gt; &#123;            sum += d.angle;            let prevData = data[i - 1];            angleStore += d.angle + (i - 1 &gt; 0 ? prevData.angle : 0);            let startAngle = - 90 - (d.angle / 2);            d.beginAngle = startAngle / 180 * Math.PI;            d.endAngle = (startAngle + d.angle) / 180 * Math.PI;            if (i == 0) &#123;                d.rotateAngle = 0;            &#125; else &#123;                d.rotateAngle = angleStore;            &#125;            wheel.pointerRange.push(sum - (data[0].angle / 2));            if (d.isTurn) &#123;                let prevItem = wheel.pointerRange[i - 1];                wheel.turnTargetRotate.push(&#123;                    rotate: ((wheel.pointerRange[i] - prevItem) / 2 + prevItem) + 3 * 360,                    index: i                &#125;)            &#125;            return d;        &#125;);    &#125;    // 此处逻辑就是绘制转盘的方法    AwardRound.prototype.render = function () &#123;        let iconW = 36 * wheel.ratio;        this.data.forEach((d, i) =&gt; &#123;            wheel.ctx.save();            wheel.ctx.translate(this.cx, this.cy);            wheel.ctx.rotate((d.rotateAngle) * Math.PI / 360);            wheel.ctx.beginPath();            // 画底盘            wheel.ctx.fillStyle = d.background || &#39;#fdf1e7&#39;;            wheel.ctx.arc(0, 0, this.cr, d.beginAngle, d.endAngle);            wheel.ctx.lineTo(0, 0);            wheel.ctx.fill()            // 名字            wheel.ctx.fillStyle = d.color || &#39;#000&#39;;            wheel.ctx.font = `$&#123;d.fontSize ? d.fontSize * wheel.ratio : 16&#125;px 微软雅黑`;            wheel.ctx.textAlign = &#39;center&#39;;            wheel.ctx.fillText(d.name || &#39;&#39;, 0, - this.cr + 20 * wheel.ratio);            // 图片            if (d.icon) &#123;                wheel.ctx.drawImage(d.icon, -iconW / 2, -this.cr + 40 * wheel.ratio, iconW, iconW);            &#125;            // 浮层            wheel.ctx.fillStyle = &#39;#000&#39;;            wheel.ctx.globalAlpha = i == wheel.pointerIndex || wheel.turned.includes(i) ? 0 : 0.5;            wheel.ctx.arc(0, 0, this.cr, d.beginAngle, d.endAngle);            wheel.ctx.lineTo(0, 0);            wheel.ctx.fill();            wheel.ctx.restore();        &#125;)    &#125;    // 按钮类    function Button(&#123;        cx,        cy    &#125;) &#123;        this.cx = cx * wheel.ratio;        this.cy = cy * wheel.ratio;        this.rotate = 0;    &#125;    Button.prototype.render = function () &#123;        let tmpW = 25 * wheel.ratio;        wheel.ctx.save()        wheel.ctx.translate(this.cx, this.cy);        wheel.ctx.rotate(this.rotate * Math.PI / 180);        wheel.ctx.beginPath()        wheel.ctx.fillStyle = &#39;#FF910B&#39;;        wheel.ctx.arc(0, 0, 50 * wheel.ratio, 0, Math.PI * 2);        wheel.ctx.fill();        wheel.ctx.moveTo(0, 0);        wheel.ctx.lineTo(tmpW, 0);        wheel.ctx.lineTo(0, -80 * wheel.ratio);        wheel.ctx.lineTo(-tmpW, 0);        wheel.ctx.fill();        wheel.ctx.restore();    &#125;    Button.prototype.update = function () &#123;        this.rotate += wheel.speed;        if (wheel.startTurn) &#123; // 开始转了            if (this.rotate &gt;= wheel.turnTargetRotate[wheel.turnedCount].rotate) &#123; // 达到阈值                wheel.delay--; //延时器                if (wheel.delay &gt; 0) &#123;                    // 休息一下                    this.rotate = wheel.turnTargetRotate[wheel.turnedCount].rotate; // 保持抽到位置                    wheel.speed = 0; //停止转动                &#125; else &#123;                    // 转下一次                    wheel.turnedCount++; // 中次+1                    wheel.turned.push(wheel.turnTargetRotate[wheel.turnedCount - 1].index);                    wheel.speed = 20;                    wheel.delay = 20;                    if (wheel.turnedCount &lt; 3) &#123;                        this.rotate = 0;                    &#125;                &#125;            &#125;        &#125;        wheel.updatePointerIndex(this.rotate);    &#125;    // 背景类    function Background() &#123;        let img = new Image()        img.src = &#39;./bg.png&#39;;        this.bgImg = img;    &#125;    Background.prototype.render = function () &#123;        let iconW = (wheel.w - 10) * wheel.ratio;        let iconH = iconW * (846 / 720);        wheel.ctx.drawImage(this.bgImg, 5 * wheel.ratio, wheel.h * wheel.ratio - iconH, iconW, iconH)    &#125;    var awardData = [        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065297220_maYiZc27.jpg&#39;,            name: &#39;感谢参与&#39;,            background: &#39;#fdf1e7&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;13&#39;,            angle: 45,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;AirJordan1&#39;,            background: &#39;#FFB876&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065313260_JDMZ2GTW.jpg&#39;,            name: &#39;iPhone手机&#39;,            background: &#39;#BD1600&#39;,            color: &#39;#FEE28A&#39;,            fontSize: &#39;11&#39;,            angle: 25,            isTurn: true,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;蓝牙音箱&#39;,            background: &#39;#FFDAB2&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065297220_maYiZc27.jpg&#39;,            name: &#39;感谢参与&#39;,            background: &#39;#fdf1e7&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;13&#39;,            angle: 45,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;AirJordan1&#39;,            background: &#39;#FFB876&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065313260_JDMZ2GTW.jpg&#39;,            name: &#39;iPhone手机&#39;,            background: &#39;#BD1600&#39;,            color: &#39;#FEE28A&#39;,            fontSize: &#39;11&#39;,            angle: 25,            isTurn: true,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;蓝牙音箱&#39;,            background: &#39;#FFDAB2&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065297220_maYiZc27.jpg&#39;,            name: &#39;感谢参与&#39;,            background: &#39;#fdf1e7&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;13&#39;,            angle: 45,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;AirJordan1&#39;,            background: &#39;#FFB876&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,        &#123;            icon: &#39;http://mdhw.oss-cn-hangzhou.aliyuncs.com/goods/1652065313260_JDMZ2GTW.jpg&#39;,            name: &#39;iPhone手机&#39;,            background: &#39;#BD1600&#39;,            color: &#39;#FEE28A&#39;,            fontSize: &#39;11&#39;,            angle: 25,            isTurn: true,        &#125;,        &#123;            icon: &#39;&#39;,            name: &#39;蓝牙音箱&#39;,            background: &#39;#FFDAB2&#39;,            color: &#39;#C24603&#39;,            fontSize: &#39;11&#39;,            angle: 25        &#125;,    ];    awardData = awardData.map(d =&gt; &#123;        if (d.icon) &#123;            let img = new Image();            img.src = d.icon;            d.icon = img        &#125;        return d    &#125;)    // 这个需要先执行， 而且得绑定到全局window上    var wheel = new Wheel();     window.onload = function () &#123;        let iconH = (wheel.w - 10) * (846 / 720);        let cx = wheel.w / 2;        let cr = cx - 30;        let cy = wheel.h - iconH + cr + 25;        var btnDom = document.querySelector(&#39;.button&#39;)        var background = new Background();        var awardRound = new AwardRound(&#123;            cx: cx,            cy: cy,            cr: cr,            data: awardData        &#125;);        var button = new Button(&#123;            cx,            cy,        &#125;);        const clickDown = function () &#123;            if (wheel.startTurn) &#123;                btnDom.removeEventListener(&#39;click&#39;, clickDown);                return;            &#125;            button.rotate = 0;            wheel.startTurn = true;            wheel.speed = 20;        &#125;        btnDom.addEventListener(&#39;click&#39;, clickDown)        function doAnimate() &#123;            // 清除画布            wheel.ctx.clearRect(0, 0, 10000, 10000)            // 渲染转盘背景            background.render();            // 渲染转盘            awardRound.render();            // 渲染按钮            button.update();            button.render();            if (wheel.turnedCount &lt; 3) &#123;                requestAnimationFrame(() =&gt; &#123;                    doAnimate();                &#125;)            &#125;        &#125;        doAnimate();    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
